/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FormDefinition, FormResult } from "./ui/types";
export namespace Components {
    interface BasicUiInputElement {
        /**
          * @function bindNativeEvents  Must call:
          * @example async bindNativeEvents(form: FormDefinition) {  return bindNativeInput(this.nativeElement, this, form); }
         */
        "bindNativeEvents": (form: FormDefinition) => Promise<void>;
        /**
          * HTML5 validation methods. Will be bound via {@link bindNativeInput} during the 'componentWillLoad' lifecyle
          * @function checkValidity  <strong>must be defined as:</strong>
          * @example 
          * @method () async checkValidity() { return checkValidity(this, this.nativeElement); }
         */
        "checkValidity": () => Promise<any>;
        /**
          * Must return the native Element
         */
        "getNativeElement": () => Promise<HTMLInputElement>;
        /**
          * Must return value, in whatever format it has
         */
        "getValue": () => Promise<any>;
        /**
          * The id of the wrapper component Should be replicated to the inner component with an id prefix
         */
        "inputId": string;
        /**
          * The name of the 'form' submitting element. should be prefixed to avoid conflicts
         */
        "inputName": string;
        "inputPrefix"?: string;
        "label": string;
        "max"?: number | string;
        "maxlength"?: number | string;
        "min"?: number | string;
        "minlength"?: number | string;
        "pattern"?: string;
        "placeholder"?: string;
        /**
          * HTML5 validation methods. Will be bound via {@link bindNativeInput} during the 'componentWillLoad' lifecyle
          * @function reportValidity  <strong>must be defined as:</strong>
          * @example 
          * @method () async reportValidity() { return reportValidity(this, this.nativeElement); }
         */
        "reportValidity": () => Promise<any>;
        /**
          * HTML5 validation Attributes
         */
        "required": boolean | "true" | "false";
        /**
          * Must clear the value
         */
        "reset": () => Promise<void>;
        /**
          * HTML5 validation methods. Will be bound via {@link bindNativeInput} during the 'componentWillLoad' lifecyle
          * @param errors
          * @function reportValidity  <strong>must be defined as:</strong>
          * @example 
          * @method () async setCustomValidity(errors) { return setCustomValidity(this, this.nativeElement, errors); }
         */
        "setCustomValidity": (errors: string) => Promise<any>;
        "step"?: number | string;
        /**
          * type of the input field
         */
        "type": "text" | "number" | "date" | "email" | "url";
        /**
          * Value of the input field
         */
        "value": string;
    }
    interface FormValidateSubmit {
        /**
          * Standard HTML Form action 'url to call'. When defined the form will perform the request with the normal form data. Otherwise will raise a {@link submitEvent}
         */
        "action"?: string;
        /**
          * Enables/disables custom validators and custom error messages
         */
        "customValidation": boolean;
        "formDefinition"?: string | FormDefinition;
        "formId": string;
        /**
          * To avoid conflicts it's better to prefix id and names
         */
        "inputPrefix"?: string;
        /**
          * HTML VERB. defaults to POST
         */
        "method"?: "GET" | "POST" | "PUT";
        /**
          * Triggers field validation whenever it's value changes
         */
        "validateOnChange": boolean;
    }
    interface IonicUiInputElement {
        /**
          * @function bindNativeEvents  Must call:
          * @example async bindNativeEvents(form: FormDefinition) {  return bindNativeInput(this.nativeElement, this, form); }
         */
        "bindNativeEvents": (form: FormDefinition) => Promise<void>;
        /**
          * HTML5 validation methods. Will be bound via {@link bindNativeInput} during the 'componentWillLoad' lifecyle
          * @function checkValidity  <strong>must be defined as:</strong>
          * @example 
          * @method () async checkValidity() { return checkValidity(this, this.nativeElement); }
         */
        "checkValidity": () => Promise<any>;
        "clearInput": boolean;
        "disabled"?: boolean;
        /**
          * Must return the native Element
         */
        "getNativeElement": () => Promise<HTMLInputElement>;
        /**
          * Must return value, in whatever format it has
         */
        "getValue": () => Promise<any>;
        /**
          * The id of the wrapper component Should be replicated to the inner component with an id prefix
         */
        "inputId": string;
        /**
          * The name of the 'form' submitting element. should be prefixed to avoid conflicts
         */
        "inputName": string;
        "inputPrefix"?: string;
        "label"?: string;
        "labelPosition": "fixed" | "floating" | "stacked";
        "lines": "inset" | "full" | "none";
        "max"?: string | number;
        "maxlength"?: string | number;
        "min"?: string | number;
        "minlength"?: string | number;
        "pattern"?: string;
        "placeholder"?: string;
        /**
          * HTML5 validation methods. Will be bound via {@link bindNativeInput} during the 'componentWillLoad' lifecyle
          * @function reportValidity  <strong>must be defined as:</strong>
          * @example 
          * @method () async reportValidity() { return reportValidity(this, this.nativeElement); }
         */
        "reportValidity": () => Promise<any>;
        /**
          * HTML5 validation Attributes
         */
        "required"?: boolean | "true" | "false";
        /**
          * Must clear the value
         */
        "reset": () => Promise<void>;
        /**
          * HTML5 validation methods. Will be bound via {@link bindNativeInput} during the 'componentWillLoad' lifecyle
          * @param errors
          * @function reportValidity  <strong>must be defined as:</strong>
          * @example 
          * @method () async setCustomValidity(errors) { return setCustomValidity(this, this.nativeElement, errors); }
         */
        "setCustomValidity": (errors: string) => Promise<any>;
        "step"?: string | number;
        /**
          * To enable custom validators
         */
        "subtype"?: string;
        /**
          * type of the input field
         */
        "type": string;
        /**
          * Value of the input field
         */
        "value": string;
    }
}
declare global {
    interface HTMLBasicUiInputElementElement extends Components.BasicUiInputElement, HTMLStencilElement {
    }
    var HTMLBasicUiInputElementElement: {
        prototype: HTMLBasicUiInputElementElement;
        new (): HTMLBasicUiInputElementElement;
    };
    interface HTMLFormValidateSubmitElement extends Components.FormValidateSubmit, HTMLStencilElement {
    }
    var HTMLFormValidateSubmitElement: {
        prototype: HTMLFormValidateSubmitElement;
        new (): HTMLFormValidateSubmitElement;
    };
    interface HTMLIonicUiInputElementElement extends Components.IonicUiInputElement, HTMLStencilElement {
    }
    var HTMLIonicUiInputElementElement: {
        prototype: HTMLIonicUiInputElementElement;
        new (): HTMLIonicUiInputElementElement;
    };
    interface HTMLElementTagNameMap {
        "basic-ui-input-element": HTMLBasicUiInputElementElement;
        "form-validate-submit": HTMLFormValidateSubmitElement;
        "ionic-ui-input-element": HTMLIonicUiInputElementElement;
    }
}
declare namespace LocalJSX {
    interface BasicUiInputElement {
        /**
          * The id of the wrapper component Should be replicated to the inner component with an id prefix
         */
        "inputId"?: string;
        /**
          * The name of the 'form' submitting element. should be prefixed to avoid conflicts
         */
        "inputName"?: string;
        "inputPrefix"?: string;
        "label"?: string;
        "max"?: number | string;
        "maxlength"?: number | string;
        "min"?: number | string;
        "minlength"?: number | string;
        "onBlurEvent"?: (event: CustomEvent<any>) => void;
        /**
          * HTML5 input events
         */
        "onChangeEvent"?: (event: CustomEvent<any>) => void;
        "onCopyEvent"?: (event: CustomEvent<any>) => void;
        "onCutEvent"?: (event: CustomEvent<any>) => void;
        "onFocusEvent"?: (event: CustomEvent<any>) => void;
        "onInputEvent"?: (event: CustomEvent<any>) => void;
        "onInvalidEvent"?: (event: CustomEvent<any>) => void;
        "onPasteEvent"?: (event: CustomEvent<any>) => void;
        "pattern"?: string;
        "placeholder"?: string;
        /**
          * HTML5 validation Attributes
         */
        "required"?: boolean | "true" | "false";
        "step"?: number | string;
        /**
          * type of the input field
         */
        "type"?: "text" | "number" | "date" | "email" | "url";
        /**
          * Value of the input field
         */
        "value"?: string;
    }
    interface FormValidateSubmit {
        /**
          * Standard HTML Form action 'url to call'. When defined the form will perform the request with the normal form data. Otherwise will raise a {@link submitEvent}
         */
        "action"?: string;
        /**
          * Enables/disables custom validators and custom error messages
         */
        "customValidation"?: boolean;
        "formDefinition"?: string | FormDefinition;
        "formId"?: string;
        /**
          * To avoid conflicts it's better to prefix id and names
         */
        "inputPrefix"?: string;
        /**
          * HTML VERB. defaults to POST
         */
        "method"?: "GET" | "POST" | "PUT";
        /**
          * Event is raised when the form is reset
         */
        "onResetEvent"?: (event: CustomEvent<any>) => void;
        /**
          * Event with the form data is raised if no form {@link action} is defined
         */
        "onSubmitEvent"?: (event: CustomEvent<FormResult>) => void;
        /**
          * Triggers field validation whenever it's value changes
         */
        "validateOnChange"?: boolean;
    }
    interface IonicUiInputElement {
        "clearInput"?: boolean;
        "disabled"?: boolean;
        /**
          * The id of the wrapper component Should be replicated to the inner component with an id prefix
         */
        "inputId"?: string;
        /**
          * The name of the 'form' submitting element. should be prefixed to avoid conflicts
         */
        "inputName"?: string;
        "inputPrefix"?: string;
        "label"?: string;
        "labelPosition"?: "fixed" | "floating" | "stacked";
        "lines"?: "inset" | "full" | "none";
        "max"?: string | number;
        "maxlength"?: string | number;
        "min"?: string | number;
        "minlength"?: string | number;
        /**
          * HTML5 input events
         */
        "onChangeEvent"?: (event: CustomEvent<any>) => void;
        "onCopyEvent"?: (event: CustomEvent<any>) => void;
        "onCutEvent"?: (event: CustomEvent<any>) => void;
        "onFocusEvent"?: (event: CustomEvent<any>) => void;
        "onInputEvent"?: (event: CustomEvent<any>) => void;
        "onInvalidEvent"?: (event: CustomEvent<any>) => void;
        "onPasteEvent"?: (event: CustomEvent<any>) => void;
        "pattern"?: string;
        "placeholder"?: string;
        /**
          * HTML5 validation Attributes
         */
        "required"?: boolean | "true" | "false";
        "step"?: string | number;
        /**
          * To enable custom validators
         */
        "subtype"?: string;
        /**
          * type of the input field
         */
        "type"?: string;
        /**
          * Value of the input field
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "basic-ui-input-element": BasicUiInputElement;
        "form-validate-submit": FormValidateSubmit;
        "ionic-ui-input-element": IonicUiInputElement;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "basic-ui-input-element": LocalJSX.BasicUiInputElement & JSXBase.HTMLAttributes<HTMLBasicUiInputElementElement>;
            "form-validate-submit": LocalJSX.FormValidateSubmit & JSXBase.HTMLAttributes<HTMLFormValidateSubmitElement>;
            "ionic-ui-input-element": LocalJSX.IonicUiInputElement & JSXBase.HTMLAttributes<HTMLIonicUiInputElementElement>;
        }
    }
}
